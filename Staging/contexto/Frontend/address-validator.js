// ===============================================\n// VALIDADOR DE DIRECCIONES CON MAPA - address-validator.js\n// ===============================================\n\n/**\n * M√≥dulo para validar direcciones mostrando un mapa\n * Integra con servicios de geocoding y mapas interactivos\n */\n\n// ===============================================\n// CONFIGURACI√ìN DEL M√ìDULO\n// ===============================================\n\nconst CONFIG_MAPS = {\n  // APIs de mapas (configurar seg√∫n disponibilidad)\n  apis: {\n    google: {\n      enabled: false, // Cambiar a true cuando tengas API key\n      key: '', // Tu API key de Google Maps\n      url: 'https://maps.googleapis.com/maps/api/js'\n    },\n    openstreetmap: {\n      enabled: true, // OpenStreetMap es gratuito\n      url: 'https://unpkg.com/leaflet@1.7.1/dist/leaflet.js'\n    }\n  },\n  \n  // Configuraci√≥n de validaci√≥n\n  validation: {\n    timeout: 10000, // 10 segundos timeout\n    zoom: 16, // Nivel de zoom del mapa\n    autoConfirm: false // Auto-confirmar direcciones v√°lidas\n  },\n  \n  // Configuraci√≥n de Argentina\n  argentina: {\n    bounds: {\n      north: -21.78,\n      south: -55.05,\n      east: -53.65,\n      west: -73.56\n    },\n    center: {\n      lat: -34.6118,\n      lng: -58.3960 // Buenos Aires como centro\n    }\n  }\n};\n\n// Variables del m√≥dulo\nlet currentMap = null;\nlet currentMarker = null;\nlet addressModal = null;\nlet isValidating = false;\n\n// ===============================================\n// INICIALIZACI√ìN\n// ===============================================\n\n/**\n * Inicializa el validador de direcciones\n */\nfunction inicializarValidadorDirecciones() {\n  console.log(\"üó∫Ô∏è Inicializando validador de direcciones...\");\n  \n  // Encontrar modal de direcciones\n  addressModal = document.getElementById('addressModal');\n  \n  if (!addressModal) {\n    console.warn(\"‚ö†Ô∏è Modal de direcciones no encontrado\");\n    return;\n  }\n  \n  // Configurar event listeners\n  configurarEventListeners();\n  \n  // Cargar librer√≠a de mapas\n  cargarLibreriaMapa();\n  \n  console.log(\"‚úÖ Validador de direcciones inicializado\");\n}\n\n/**\n * Carga la librer√≠a de mapas seg√∫n configuraci√≥n\n */\nfunction cargarLibreriaMapa() {\n  if (CONFIG_MAPS.apis.google.enabled && CONFIG_MAPS.apis.google.key) {\n    cargarGoogleMaps();\n  } else {\n    cargarOpenStreetMap();\n  }\n}\n\n/**\n * Carga Google Maps\n */\nfunction cargarGoogleMaps() {\n  console.log(\"üìç Cargando Google Maps...\");\n  \n  if (window.google && window.google.maps) {\n    console.log(\"‚úÖ Google Maps ya cargado\");\n    return;\n  }\n  \n  const script = document.createElement('script');\n  script.src = `${CONFIG_MAPS.apis.google.url}?key=${CONFIG_MAPS.apis.google.key}&callback=initGoogleMaps`;\n  script.async = true;\n  script.defer = true;\n  \n  window.initGoogleMaps = function() {\n    console.log(\"‚úÖ Google Maps cargado exitosamente\");\n  };\n  \n  document.head.appendChild(script);\n}\n\n/**\n * Carga OpenStreetMap con Leaflet\n */\nfunction cargarOpenStreetMap() {\n  console.log(\"üó∫Ô∏è Cargando OpenStreetMap...\");\n  \n  if (window.L) {\n    console.log(\"‚úÖ Leaflet ya cargado\");\n    return;\n  }\n  \n  // Cargar CSS de Leaflet\n  const link = document.createElement('link');\n  link.rel = 'stylesheet';\n  link.href = 'https://unpkg.com/leaflet@1.7.1/dist/leaflet.css';\n  document.head.appendChild(link);\n  \n  // Cargar JS de Leaflet\n  const script = document.createElement('script');\n  script.src = CONFIG_MAPS.apis.openstreetmap.url;\n  script.onload = function() {\n    console.log(\"‚úÖ OpenStreetMap cargado exitosamente\");\n  };\n  \n  document.head.appendChild(script);\n}\n\n// ===============================================\n// EVENT LISTENERS\n// ===============================================\n\n/**\n * Configura los event listeners del validador\n */\nfunction configurarEventListeners() {\n  console.log(\"üîó Configurando event listeners del validador...\");\n  \n  // Listener para cuando se abre el modal\n  addressModal.addEventListener('shown.bs.modal', function() {\n    console.log(\"üìç Modal de direcci√≥n abierto\");\n    \n    // Crear contenedor de mapa si no existe\n    crearContenedorMapa();\n  });\n  \n  // Listener para el bot√≥n de validar direcci√≥n\n  const validateBtn = document.getElementById('validate-address-btn');\n  if (validateBtn) {\n    validateBtn.addEventListener('click', validarDireccionCompleta);\n  }\n  \n  // Listener para cambios en los campos de direcci√≥n\n  const addressInputs = [\n    'address-street',\n    'address-number',\n    'address-postal-code',\n    'address-city',\n    'address-province'\n  ];\n  \n  addressInputs.forEach(inputId => {\n    const input = document.getElementById(inputId);\n    if (input) {\n      input.addEventListener('blur', debounce(autoValidarCampos, 1000));\n    }\n  });\n  \n  console.log(\"‚úÖ Event listeners configurados\");\n}\n\n// ===============================================\n// CREACI√ìN DEL MAPA\n// ===============================================\n\n/**\n * Crea el contenedor del mapa en el modal\n */\nfunction crearContenedorMapa() {\n  console.log(\"üó∫Ô∏è Creando contenedor de mapa...\");\n  \n  // Buscar si ya existe\n  let mapContainer = document.getElementById('address-map-container');\n  \n  if (mapContainer) {\n    console.log(\"‚ÑπÔ∏è Contenedor de mapa ya existe\");\n    return;\n  }\n  \n  // Crear nuevo contenedor\n  mapContainer = document.createElement('div');\n  mapContainer.id = 'address-map-container';\n  mapContainer.innerHTML = `\n    <div class=\"address-validation-section\">\n      <div class=\"validation-header\">\n        <h6 class=\"validation-title\">\n          <i class=\"fas fa-map-marker-alt\"></i>\n          Validaci√≥n de Direcci√≥n\n        </h6>\n        <button type=\"button\" class=\"btn btn-sm btn-outline-primary\" id=\"validate-address-btn\">\n          <i class=\"fas fa-search\"></i>\n          Validar direcci√≥n\n        </button>\n      </div>\n      \n      <div class=\"map-container\" id=\"address-map\" style=\"height: 300px; border-radius: 8px; overflow: hidden; margin: 1rem 0;\">\n        <div class=\"map-placeholder\">\n          <div class=\"placeholder-content\">\n            <i class=\"fas fa-map text-muted\" style=\"font-size: 3rem;\"></i>\n            <p class=\"text-muted mt-2\">Complet√° la direcci√≥n para ver el mapa</p>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"validation-status\" id=\"validation-status\" style=\"display: none;\">\n        <!-- El estado de validaci√≥n aparecer√° aqu√≠ -->\n      </div>\n      \n      <div class=\"validation-actions\" id=\"validation-actions\" style=\"display: none;\">\n        <button type=\"button\" class=\"btn btn-success btn-sm\" id=\"confirm-address-btn\">\n          <i class=\"fas fa-check\"></i>\n          Confirmar direcci√≥n\n        </button>\n        <button type=\"button\" class=\"btn btn-outline-secondary btn-sm\" id=\"edit-address-btn\">\n          <i class=\"fas fa-edit\"></i>\n          Corregir direcci√≥n\n        </button>\n      </div>\n    </div>\n  `;\n  \n  // Agregar al modal antes del footer\n  const modalBody = addressModal.querySelector('.modal-body');\n  modalBody.appendChild(mapContainer);\n  \n  // Configurar eventos del contenedor\n  configurarEventosMapa();\n  \n  console.log(\"‚úÖ Contenedor de mapa creado\");\n}\n\n/**\n * Configura eventos espec√≠ficos del mapa\n */\nfunction configurarEventosMapa() {\n  const validateBtn = document.getElementById('validate-address-btn');\n  const confirmBtn = document.getElementById('confirm-address-btn');\n  const editBtn = document.getElementById('edit-address-btn');\n  \n  if (validateBtn) {\n    validateBtn.addEventListener('click', validarDireccionCompleta);\n  }\n  \n  if (confirmBtn) {\n    confirmBtn.addEventListener('click', confirmarDireccion);\n  }\n  \n  if (editBtn) {\n    editBtn.addEventListener('click', editarDireccion);\n  }\n}\n\n// ===============================================\n// VALIDACI√ìN DE DIRECCIONES\n// ===============================================\n\n/**\n * Valida la direcci√≥n completa y muestra el mapa\n */\nasync function validarDireccionCompleta() {\n  console.log(\"üîç Validando direcci√≥n completa...\");\n  \n  if (isValidating) {\n    console.log(\"‚ö†Ô∏è Validaci√≥n ya en progreso\");\n    return;\n  }\n  \n  isValidating = true;\n  mostrarEstadoValidacion('validating', 'Validando direcci√≥n...');\n  \n  try {\n    // Obtener datos del formulario\n    const addressData = obtenerDatosDireccion();\n    \n    // Validar campos requeridos\n    if (!validarCamposRequeridos(addressData)) {\n      mostrarEstadoValidacion('error', 'Por favor complet√° todos los campos requeridos');\n      isValidating = false;\n      return;\n    }\n    \n    // Construir direcci√≥n completa\n    const fullAddress = construirDireccionCompleta(addressData);\n    console.log(\"üìç Direcci√≥n a validar:\", fullAddress);\n    \n    // Geocodificar direcci√≥n\n    const coordinates = await geocodificarDireccion(fullAddress);\n    \n    if (coordinates) {\n      // Mostrar mapa con la ubicaci√≥n\n      await mostrarMapaConUbicacion(coordinates, fullAddress);\n      mostrarEstadoValidacion('success', 'Direcci√≥n encontrada y validada');\n      mostrarAccionesValidacion(true);\n    } else {\n      mostrarEstadoValidacion('error', 'No se pudo encontrar la direcci√≥n. Verific√° los datos ingresados.');\n      mostrarAccionesValidacion(false);\n    }\n    \n  } catch (error) {\n    console.error(\"‚ùå Error validando direcci√≥n:\", error);\n    mostrarEstadoValidacion('error', 'Error validando direcci√≥n. Intent√° nuevamente.');\n    mostrarAccionesValidacion(false);\n  } finally {\n    isValidating = false;\n  }\n}\n\n/**\n * Auto-valida campos cuando el usuario termina de escribir\n */\nfunction autoValidarCampos() {\n  const addressData = obtenerDatosDireccion();\n  \n  if (validarCamposRequeridos(addressData)) {\n    console.log(\"‚úÖ Campos b√°sicos completados, habilitando validaci√≥n\");\n    \n    const validateBtn = document.getElementById('validate-address-btn');\n    if (validateBtn) {\n      validateBtn.disabled = false;\n      validateBtn.innerHTML = '<i class=\"fas fa-search\"></i> Validar direcci√≥n';\n    }\n  }\n}\n\n/**\n * Obtiene los datos del formulario de direcci√≥n\n */\nfunction obtenerDatosDireccion() {\n  return {\n    alias: document.getElementById('address-alias')?.value?.trim() || '',\n    calle: document.getElementById('address-street')?.value?.trim() || '',\n    numero: document.getElementById('address-number')?.value?.trim() || '',\n    piso: document.getElementById('address-floor')?.value?.trim() || '',\n    departamento: document.getElementById('address-apartment')?.value?.trim() || '',\n    codigoPostal: document.getElementById('address-postal-code')?.value?.trim() || '',\n    localidad: document.getElementById('address-city')?.value?.trim() || '',\n    provincia: document.getElementById('address-province')?.value?.trim() || '',\n    instrucciones: document.getElementById('address-instructions')?.value?.trim() || ''\n  };\n}\n\n/**\n * Valida que los campos requeridos est√©n completos\n */\nfunction validarCamposRequeridos(data) {\n  const required = ['calle', 'numero', 'codigoPostal', 'localidad', 'provincia'];\n  return required.every(field => data[field] && data[field].length > 0);\n}\n\n/**\n * Construye la direcci√≥n completa para geocoding\n */\nfunction construirDireccionCompleta(data) {\n  let address = `${data.calle} ${data.numero}`;\n  \n  if (data.piso) {\n    address += `, Piso ${data.piso}`;\n  }\n  \n  if (data.departamento) {\n    address += `, Depto ${data.departamento}`;\n  }\n  \n  address += `, ${data.localidad}, ${data.provincia}, Argentina`;\n  \n  if (data.codigoPostal) {\n    address += ` ${data.codigoPostal}`;\n  }\n  \n  return address;\n}\n\n// ===============================================\n// GEOCODING\n// ===============================================\n\n/**\n * Geocodifica una direcci√≥n usando APIs disponibles\n */\nasync function geocodificarDireccion(address) {\n  console.log(\"üåç Geocodificando:\", address);\n  \n  try {\n    // Intentar con Nominatim (OpenStreetMap) - es gratuito\n    const result = await geocodificarConNominatim(address);\n    \n    if (result) {\n      console.log(\"‚úÖ Geocoding exitoso:\", result);\n      return result;\n    }\n    \n    // Si falla, intentar con otras APIs\n    console.log(\"‚ö†Ô∏è Geocoding con Nominatim fall√≥, intentando otras APIs...\");\n    \n    return null;\n    \n  } catch (error) {\n    console.error(\"‚ùå Error en geocoding:\", error);\n    return null;\n  }\n}\n\n/**\n * Geocodifica usando Nominatim (OpenStreetMap)\n */\nasync function geocodificarConNominatim(address) {\n  const url = new URL('https://nominatim.openstreetmap.org/search');\n  url.searchParams.append('q', address);\n  url.searchParams.append('format', 'json');\n  url.searchParams.append('addressdetails', '1');\n  url.searchParams.append('countrycodes', 'ar'); // Solo Argentina\n  url.searchParams.append('limit', '1');\n  \n  try {\n    const response = await fetch(url.toString(), {\n      headers: {\n        'User-Agent': 'CaminandoOnline/1.0 (contacto@caminando.online)'\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    if (data && data.length > 0) {\n      const result = data[0];\n      return {\n        lat: parseFloat(result.lat),\n        lng: parseFloat(result.lon),\n        display_name: result.display_name,\n        address: result.address || {},\n        confidence: parseFloat(result.importance || 0.5)\n      };\n    }\n    \n    return null;\n    \n  } catch (error) {\n    console.error(\"‚ùå Error con Nominatim:\", error);\n    return null;\n  }\n}\n\n// ===============================================\n// MOSTRAR MAPA\n// ===============================================\n\n/**\n * Muestra el mapa con la ubicaci√≥n encontrada\n */\nasync function mostrarMapaConUbicacion(coordinates, address) {\n  console.log(\"üó∫Ô∏è Mostrando mapa con ubicaci√≥n:\", coordinates);\n  \n  const mapContainer = document.getElementById('address-map');\n  \n  if (!mapContainer) {\n    console.error(\"‚ùå Contenedor de mapa no encontrado\");\n    return;\n  }\n  \n  // Limpiar contenido anterior\n  mapContainer.innerHTML = '';\n  \n  try {\n    if (window.L) {\n      // Usar Leaflet (OpenStreetMap)\n      await crearMapaLeaflet(mapContainer, coordinates, address);\n    } else if (window.google && window.google.maps) {\n      // Usar Google Maps\n      await crearMapaGoogle(mapContainer, coordinates, address);\n    } else {\n      // Fallback: mostrar informaci√≥n sin mapa interactivo\n      mostrarInformacionUbicacion(mapContainer, coordinates, address);\n    }\n  } catch (error) {\n    console.error(\"‚ùå Error creando mapa:\", error);\n    mostrarInformacionUbicacion(mapContainer, coordinates, address);\n  }\n}\n\n/**\n * Crea mapa usando Leaflet\n */\nasync function crearMapaLeaflet(container, coordinates, address) {\n  console.log(\"üçÉ Creando mapa con Leaflet...\");\n  \n  // Crear mapa\n  currentMap = L.map(container).setView([coordinates.lat, coordinates.lng], CONFIG_MAPS.validation.zoom);\n  \n  // Agregar capa de mapa\n  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '¬© OpenStreetMap contributors',\n    maxZoom: 19\n  }).addTo(currentMap);\n  \n  // Agregar marcador\n  currentMarker = L.marker([coordinates.lat, coordinates.lng])\n    .addTo(currentMap)\n    .bindPopup(`\n      <div class=\"map-popup\">\n        <strong>üìç Ubicaci√≥n encontrada</strong><br>\n        <small>${address}</small>\n      </div>\n    `)\n    .openPopup();\n  \n  console.log(\"‚úÖ Mapa Leaflet creado exitosamente\");\n}\n\n/**\n * Crea mapa usando Google Maps\n */\nasync function crearMapaGoogle(container, coordinates, address) {\n  console.log(\"üó∫Ô∏è Creando mapa con Google Maps...\");\n  \n  const mapOptions = {\n    center: { lat: coordinates.lat, lng: coordinates.lng },\n    zoom: CONFIG_MAPS.validation.zoom,\n    mapTypeId: google.maps.MapTypeId.ROADMAP\n  };\n  \n  currentMap = new google.maps.Map(container, mapOptions);\n  \n  currentMarker = new google.maps.Marker({\n    position: { lat: coordinates.lat, lng: coordinates.lng },\n    map: currentMap,\n    title: address\n  });\n  \n  const infoWindow = new google.maps.InfoWindow({\n    content: `\n      <div class=\"map-popup\">\n        <strong>üìç Ubicaci√≥n encontrada</strong><br>\n        <small>${address}</small>\n      </div>\n    `\n  });\n  \n  infoWindow.open(currentMap, currentMarker);\n  \n  console.log(\"‚úÖ Mapa Google creado exitosamente\");\n}\n\n/**\n * Muestra informaci√≥n de ubicaci√≥n sin mapa interactivo\n */\nfunction mostrarInformacionUbicacion(container, coordinates, address) {\n  console.log(\"üìç Mostrando informaci√≥n de ubicaci√≥n sin mapa\");\n  \n  container.innerHTML = `\n    <div class=\"location-info\">\n      <div class=\"location-header\">\n        <i class=\"fas fa-map-marker-alt text-success\"></i>\n        <strong>Ubicaci√≥n encontrada</strong>\n      </div>\n      <div class=\"location-details\">\n        <p><strong>Direcci√≥n:</strong> ${address}</p>\n        <p><strong>Coordenadas:</strong> ${coordinates.lat.toFixed(6)}, ${coordinates.lng.toFixed(6)}</p>\n        <p class=\"text-muted\">La direcci√≥n ha sido validada correctamente.</p>\n      </div>\n      <div class=\"location-actions\">\n        <a href=\"https://www.google.com/maps?q=${coordinates.lat},${coordinates.lng}\" \n           target=\"_blank\" \n           class=\"btn btn-sm btn-outline-primary\">\n          <i class=\"fas fa-external-link-alt\"></i>\n          Ver en Google Maps\n        </a>\n      </div>\n    </div>\n  `;\n}\n\n// ===============================================\n// ESTADO DE VALIDACI√ìN\n// ===============================================\n\n/**\n * Muestra el estado de validaci√≥n\n */\nfunction mostrarEstadoValidacion(tipo, mensaje) {\n  const statusContainer = document.getElementById('validation-status');\n  \n  if (!statusContainer) {\n    console.warn(\"‚ö†Ô∏è Contenedor de estado no encontrado\");\n    return;\n  }\n  \n  let iconClass = '';\n  let alertClass = '';\n  \n  switch (tipo) {\n    case 'validating':\n      iconClass = 'fas fa-spinner fa-spin';\n      alertClass = 'alert-info';\n      break;\n    case 'success':\n      iconClass = 'fas fa-check-circle';\n      alertClass = 'alert-success';\n      break;\n    case 'error':\n      iconClass = 'fas fa-exclamation-triangle';\n      alertClass = 'alert-danger';\n      break;\n    default:\n      iconClass = 'fas fa-info-circle';\n      alertClass = 'alert-info';\n  }\n  \n  statusContainer.innerHTML = `\n    <div class=\"alert ${alertClass} alert-sm\">\n      <i class=\"${iconClass}\"></i>\n      ${mensaje}\n    </div>\n  `;\n  \n  statusContainer.style.display = 'block';\n}\n\n/**\n * Muestra u oculta las acciones de validaci√≥n\n */\nfunction mostrarAccionesValidacion(mostrar) {\n  const actionsContainer = document.getElementById('validation-actions');\n  \n  if (actionsContainer) {\n    actionsContainer.style.display = mostrar ? 'block' : 'none';\n  }\n}\n\n// ===============================================\n// ACCIONES DE VALIDACI√ìN\n// ===============================================\n\n/**\n * Confirma la direcci√≥n validada\n */\nfunction confirmarDireccion() {\n  console.log(\"‚úÖ Confirmando direcci√≥n...\");\n  \n  // Marcar como confirmada\n  const addressData = obtenerDatosDireccion();\n  addressData.validated = true;\n  addressData.coordinates = currentMarker ? {\n    lat: currentMarker.getLatLng ? currentMarker.getLatLng().lat : currentMarker.getPosition().lat(),\n    lng: currentMarker.getLatLng ? currentMarker.getLatLng().lng : currentMarker.getPosition().lng()\n  } : null;\n  \n  // Actualizar interfaz\n  mostrarEstadoValidacion('success', '‚úÖ Direcci√≥n confirmada y lista para guardar');\n  \n  // Habilitar bot√≥n de guardar\n  const saveBtn = document.getElementById('save-address-btn');\n  if (saveBtn) {\n    saveBtn.disabled = false;\n    saveBtn.innerHTML = `\n      <span class=\"btn-text\">\n        <i class=\"fas fa-check\"></i>\n        Guardar direcci√≥n validada\n      </span>\n    `;\n  }\n  \n  // Disparar evento personalizado\n  document.dispatchEvent(new CustomEvent('addressValidated', {\n    detail: addressData\n  }));\n  \n  console.log(\"‚úÖ Direcci√≥n confirmada\", addressData);\n}\n\n/**\n * Permite editar la direcci√≥n\n */\nfunction editarDireccion() {\n  console.log(\"‚úèÔ∏è Editando direcci√≥n...\");\n  \n  // Limpiar mapa\n  if (currentMap) {\n    const mapContainer = document.getElementById('address-map');\n    if (mapContainer) {\n      mapContainer.innerHTML = `\n        <div class=\"map-placeholder\">\n          <div class=\"placeholder-content\">\n            <i class=\"fas fa-map text-muted\" style=\"font-size: 3rem;\"></i>\n            <p class=\"text-muted mt-2\">Complet√° la direcci√≥n para ver el mapa</p>\n          </div>\n        </div>\n      `;\n    }\n  }\n  \n  // Ocultar estado y acciones\n  mostrarAccionesValidacion(false);\n  \n  const statusContainer = document.getElementById('validation-status');\n  if (statusContainer) {\n    statusContainer.style.display = 'none';\n  }\n  \n  // Habilitar campos para edici√≥n\n  const inputs = [\n    'address-street',\n    'address-number',\n    'address-postal-code',\n    'address-city',\n    'address-province'\n  ];\n  \n  inputs.forEach(inputId => {\n    const input = document.getElementById(inputId);\n    if (input) {\n      input.focus();\n      return; // Focus en el primer campo encontrado\n    }\n  });\n  \n  console.log(\"‚úÖ Direcci√≥n lista para editar\");\n}\n\n// ===============================================\n// UTILIDADES\n// ===============================================\n\n/**\n * Debounce function para evitar validaciones excesivas\n */\nfunction debounce(func, wait) {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\n/**\n * Limpia recursos del mapa\n */\nfunction limpiarMapa() {\n  if (currentMap) {\n    if (currentMap.remove) {\n      currentMap.remove(); // Leaflet\n    } else if (currentMap.setMap) {\n      currentMap.setMap(null); // Google Maps\n    }\n    currentMap = null;\n  }\n  \n  if (currentMarker) {\n    currentMarker = null;\n  }\n}\n\n// ===============================================\n// API P√öBLICA\n// ===============================================\n\nwindow.AddressValidator = {\n  // Inicializaci√≥n\n  inicializar: inicializarValidadorDirecciones,\n  \n  // Validaci√≥n\n  validarDireccion: validarDireccionCompleta,\n  \n  // Estado\n  estaValidando: () => isValidating,\n  \n  // Limpieza\n  limpiar: limpiarMapa,\n  \n  // Configuraci√≥n\n  configuracion: CONFIG_MAPS\n};\n\nconsole.log(\"üì¶ AddressValidator cargado\");\n