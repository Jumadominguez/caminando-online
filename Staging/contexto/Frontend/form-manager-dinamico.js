// ===============================================\n// FORM MANAGER DINÁMICO - USA DATOS MOCK\n// ===============================================\n\n/**\n * Módulo que maneja todos los formularios de manera dinámica\n * Usa datos mock que simulan las respuestas del backend\n */\n\n// Importar datos mock (simulan respuestas del backend)\nimport { \n  TIPOS_PRODUCTO_MOCK, \n  CATEGORIAS_MOCK, \n  MARCAS_MOCK, \n  CONTENIDOS_MOCK, \n  VARIEDADES_MOCK,\n  API_CONFIG \n} from '../data/mock-data.js';\n\n// Variable para almacenar el tipo de producto seleccionado\nlet tipoProductoActual = null;\n\n/**\n * Inicializa todos los formularios dinámicos\n */\nfunction inicializarFormularios() {\n  console.log(\"📝 Iniciando Form Manager Dinámico...\");\n  \n  // Cargar tipos de producto dinámicamente\n  cargarTiposProducto();\n  \n  // Configurar event listeners para filtros dinámicos\n  configurarEventListenersFiltros();\n  \n  // Inicialmente ocultar filtros secundarios\n  ocultarFiltrosSecundarios();\n  \n  console.log(\"✅ Form Manager Dinámico inicializado\");\n}\n\n/**\n * Carga las opciones de tipos de producto dinámicamente\n */\nfunction cargarTiposProducto() {\n  const select = document.getElementById(\"tipo-de-producto\");\n  if (!select) {\n    console.warn(\"⚠️ Select tipo-de-producto no encontrado\");\n    return;\n  }\n  \n  console.log(\"📦 Cargando tipos de producto desde mock data...\");\n  \n  // Limpiar opciones existentes (excepto la primera)\n  const opciones = select.querySelectorAll('option:not(:first-child)');\n  opciones.forEach(opcion => opcion.remove());\n  \n  // Agregar opciones dinámicamente desde mock data\n  TIPOS_PRODUCTO_MOCK\n    .filter(tipo => tipo.activo)\n    .sort((a, b) => a.orden - b.orden)\n    .forEach(tipo => {\n      const option = document.createElement('option');\n      option.value = tipo.id;\n      option.setAttribute('data-id', tipo.id);\n      option.setAttribute('data-categoria', tipo.categoria);\n      option.textContent = tipo.nombre;\n      select.appendChild(option);\n    });\n  \n  console.log(`✅ ${TIPOS_PRODUCTO_MOCK.length} tipos de producto cargados dinámicamente`);\n}\n\n/**\n * Configura event listeners para filtros dinámicos\n */\nfunction configurarEventListenersFiltros() {\n  const tipoProductoSelect = document.getElementById(\"tipo-de-producto\");\n  \n  if (tipoProductoSelect) {\n    tipoProductoSelect.addEventListener('change', manejarCambioTipoProducto);\n  }\n  \n  console.log(\"✅ Event listeners de filtros configurados\");\n}\n\n/**\n * Maneja el cambio en el select de tipo de producto\n */\nfunction manejarCambioTipoProducto(event) {\n  const tipoSeleccionado = event.target.value;\n  \n  if (!tipoSeleccionado) {\n    ocultarFiltrosSecundarios();\n    return;\n  }\n  \n  console.log(`🎯 Tipo de producto seleccionado: ${tipoSeleccionado}`);\n  \n  // Guardar tipo actual\n  tipoProductoActual = tipoSeleccionado;\n  \n  // Mostrar filtros secundarios\n  mostrarFiltrosSecundarios();\n  \n  // Cargar opciones específicas para este tipo\n  cargarOpcionesPorTipo(tipoSeleccionado);\n}\n\n/**\n * Carga opciones específicas para un tipo de producto\n */\nfunction cargarOpcionesPorTipo(tipoProducto) {\n  console.log(`📋 Cargando opciones para tipo: ${tipoProducto}`);\n  \n  // Cargar marcas\n  cargarOpcionesFiltro('marca', MARCAS_MOCK[tipoProducto] || []);\n  \n  // Cargar contenidos\n  cargarOpcionesFiltro('contenido', CONTENIDOS_MOCK[tipoProducto] || []);\n  \n  // Cargar variedades\n  cargarOpcionesFiltro('variedad', VARIEDADES_MOCK[tipoProducto] || []);\n  \n  console.log(`✅ Opciones cargadas para ${tipoProducto}`);\n}\n\n/**\n * Carga opciones en un filtro específico\n */\nfunction cargarOpcionesFiltro(filtroId, opciones) {\n  const select = document.getElementById(filtroId);\n  if (!select) {\n    console.warn(`⚠️ Filtro ${filtroId} no encontrado`);\n    return;\n  }\n  \n  // Limpiar opciones existentes (excepto la primera)\n  const opcionesExistentes = select.querySelectorAll('option:not(:first-child)');\n  opcionesExistentes.forEach(opcion => opcion.remove());\n  \n  // Agregar nuevas opciones\n  opciones.forEach(opcion => {\n    const option = document.createElement('option');\n    option.value = opcion;\n    option.textContent = opcion;\n    select.appendChild(option);\n  });\n  \n  console.log(`✅ ${opciones.length} opciones cargadas en ${filtroId}`);\n}\n\n/**\n * Muestra los filtros secundarios (marca, contenido, variedad)\n */\nfunction mostrarFiltrosSecundarios() {\n  const wrappers = ['marca-wrapper', 'contenido-wrapper', 'variedad-wrapper'];\n  \n  wrappers.forEach(wrapperId => {\n    const wrapper = document.getElementById(wrapperId);\n    if (wrapper) {\n      wrapper.classList.remove('d-none');\n      // Animación suave\n      wrapper.style.opacity = '0';\n      wrapper.style.transform = 'translateY(-10px)';\n      setTimeout(() => {\n        wrapper.style.transition = 'all 0.3s ease';\n        wrapper.style.opacity = '1';\n        wrapper.style.transform = 'translateY(0)';\n      }, 50);\n    }\n  });\n  \n  console.log(\"✅ Filtros secundarios mostrados\");\n}\n\n/**\n * Oculta los filtros secundarios\n */\nfunction ocultarFiltrosSecundarios() {\n  const wrappers = ['marca-wrapper', 'contenido-wrapper', 'variedad-wrapper'];\n  \n  wrappers.forEach(wrapperId => {\n    const wrapper = document.getElementById(wrapperId);\n    if (wrapper) {\n      wrapper.classList.add('d-none');\n      \n      // Limpiar selects\n      const select = wrapper.querySelector('select');\n      if (select) {\n        const opciones = select.querySelectorAll('option:not(:first-child)');\n        opciones.forEach(opcion => opcion.remove());\n      }\n    }\n  });\n  \n  console.log(\"✅ Filtros secundarios ocultados\");\n}\n\n/**\n * Simula llamada a API del backend\n * En el futuro esto hará fetch() real al backend\n */\nasync function simularLlamadaAPI(endpoint, params = {}) {\n  console.log(`🌐 Simulando llamada a ${endpoint}`, params);\n  \n  // Simular delay de red\n  await new Promise(resolve => setTimeout(resolve, 100));\n  \n  // En el futuro será:\n  // const response = await fetch(`${API_CONFIG.base_url}${endpoint}`, {\n  //   method: 'GET',\n  //   headers: { 'Content-Type': 'application/json' },\n  //   ...params\n  // });\n  // return await response.json();\n  \n  // Por ahora devolvemos datos mock\n  switch(endpoint) {\n    case '/api/tipos-producto':\n      return TIPOS_PRODUCTO_MOCK;\n    case '/api/categorias':\n      return CATEGORIAS_MOCK;\n    default:\n      return [];\n  }\n}\n\n/**\n * Obtiene el tipo de producto actualmente seleccionado\n */\nfunction obtenerTipoProductoActual() {\n  return tipoProductoActual;\n}\n\n/**\n * Resetea todos los filtros\n */\nfunction resetearFiltros() {\n  // Resetear select principal\n  const tipoSelect = document.getElementById('tipo-de-producto');\n  if (tipoSelect) {\n    tipoSelect.selectedIndex = 0;\n  }\n  \n  // Ocultar y limpiar filtros secundarios\n  ocultarFiltrosSecundarios();\n  \n  // Resetear variable\n  tipoProductoActual = null;\n  \n  console.log(\"🔄 Filtros reseteados\");\n}\n\n// ===============================================\n// API PÚBLICA DEL MÓDULO\n// ===============================================\n\n// Exponer funciones públicas\nwindow.FormManagerDinamico = {\n  inicializar: inicializarFormularios,\n  cargarTiposProducto: cargarTiposProducto,\n  cargarOpcionesPorTipo: cargarOpcionesPorTipo,\n  mostrarFiltros: mostrarFiltrosSecundarios,\n  ocultarFiltros: ocultarFiltrosSecundarios,\n  resetear: resetearFiltros,\n  obtenerTipoActual: obtenerTipoProductoActual,\n  simularAPI: simularLlamadaAPI\n};\n\nconsole.log(\"📦 FormManager Dinámico cargado\");\n