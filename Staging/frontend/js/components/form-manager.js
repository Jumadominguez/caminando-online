// ===============================================\n// FORM MANAGER - M√ìDULO DE GESTI√ìN DE FORMULARIOS\n// ===============================================\n\n/**\n * M√≥dulo responsable de manejar formularios din√°micos\n * Incluye: opciones de productos, categor√≠as, filtros\n */\n\n// Configuraci√≥n din√°mica que vendr√° del backend\nconst FORM_CONFIG = {\n  // Tipos de producto - estos vendr√°n del backend\n  tiposProducto: [\n    { value: \"Molinos Ala\", id: \"molinos-ala\", activo: true },\n    { value: \"Arcor\", id: \"arcor\", activo: true },\n    { value: \"La Seren√≠sima\", id: \"la-serenisima\", activo: true },\n    { value: \"Coca-Cola\", id: \"coca-cola\", activo: true },\n    { value: \"Ala\", id: \"ala\", activo: true }\n  ],\n  \n  // Supermercados disponibles - estos vendr√°n del backend\n  supermercados: [\n    { name: \"Carrefour\", logo: \"/assets/img/logos/carrefour_logo.png\", activo: true },\n    { name: \"Disco\", logo: \"/assets/img/logos/disco_logo.png\", activo: true },\n    { name: \"Jumbo\", logo: \"/assets/img/logos/jumbo_logo.png\", activo: true },\n    { name: \"D√≠a\", logo: \"/assets/img/logos/d√≠a_logo.png\", activo: true },\n    { name: \"Vea\", logo: \"/assets/img/logos/vea_logo.png\", activo: true }\n  ],\n  \n  // URLs de API - configuraci√≥n para backend\n  apiUrls: {\n    categorias: \"/api/categorias\",\n    subcategorias: \"/api/subcategorias\",\n    productos: \"/api/productos\",\n    supermercados: \"/api/supermercados\"\n  }\n};\n\n/**\n * Inicializa todos los formularios din√°micos\n */\nfunction inicializarFormularios() {\n  console.log(\"üìù Iniciando Form Manager...\");\n  \n  // Cargar opciones de tipos de producto\n  cargarTiposProducto();\n  \n  // Configurar filtros din√°micos\n  configurarFiltrosDinamicos();\n  \n  console.log(\"‚úÖ Form Manager inicializado\");\n}\n\n/**\n * Carga las opciones de tipos de producto din√°micamente\n */\nfunction cargarTiposProducto() {\n  const select = document.getElementById(\"tipo-de-producto\");\n  if (!select) return;\n  \n  // Limpiar opciones existentes (excepto la primera)\n  const opciones = select.querySelectorAll('option:not(:first-child)');\n  opciones.forEach(opcion => opcion.remove());\n  \n  // Agregar opciones din√°micamente\n  FORM_CONFIG.tiposProducto.forEach(tipo => {\n    if (tipo.activo) {\n      const option = document.createElement('option');\n      option.value = tipo.value;\n      option.setAttribute('data-id', tipo.id);\n      option.textContent = tipo.value;\n      select.appendChild(option);\n    }\n  });\n  \n  console.log(\"‚úÖ Tipos de producto cargados din√°micamente\");\n}\n\n/**\n * Configura los filtros din√°micos (marca, contenido, variedad)\n */\nfunction configurarFiltrosDinamicos() {\n  // Inicialmente ocultar los wrappers de filtros\n  ocultarFiltrosAdicionales();\n  \n  // Los filtros se mostrar√°n cuando se seleccione una categor√≠a\n  console.log(\"‚úÖ Filtros din√°micos configurados\");\n}\n\n/**\n * Oculta los filtros adicionales inicialmente\n */\nfunction ocultarFiltrosAdicionales() {\n  const wrappers = ['marca-wrapper', 'contenido-wrapper', 'variedad-wrapper'];\n  wrappers.forEach(wrapperId => {\n    const wrapper = document.getElementById(wrapperId);\n    if (wrapper) {\n      wrapper.classList.add('d-none');\n    }\n  });\n}\n\n/**\n * Muestra los filtros adicionales cuando se selecciona una categor√≠a\n */\nfunction mostrarFiltrosAdicionales() {\n  const wrappers = ['marca-wrapper', 'contenido-wrapper', 'variedad-wrapper'];\n  wrappers.forEach(wrapperId => {\n    const wrapper = document.getElementById(wrapperId);\n    if (wrapper) {\n      wrapper.classList.remove('d-none');\n    }\n  });\n}\n\n/**\n * Puebla un filtro con opciones din√°micas\n * @param {string} filtroId - ID del filtro\n * @param {Array} opciones - Array de opciones\n */\nfunction poblarFiltroDinamico(filtroId, opciones) {\n  const filtro = document.getElementById(filtroId);\n  if (!filtro) return;\n\n  // Limpiar opciones existentes excepto la primera\n  const opcionesExistentes = filtro.querySelectorAll('option:not(:first-child)');\n  opcionesExistentes.forEach(opcion => opcion.remove());\n  \n  // Agregar nuevas opciones\n  opciones.forEach(opcion => {\n    const opt = document.createElement('option');\n    opt.value = opcion;\n    opt.textContent = opcion;\n    filtro.appendChild(opt);\n  });\n  \n  console.log(`‚úÖ Filtro ${filtroId} poblado con ${opciones.length} opciones`);\n}\n\n/**\n * Carga datos de categor√≠as desde el backend (o mock)\n * @returns {Promise} - Promise con los datos de categor√≠as\n */\nasync function cargarCategorias() {\n  try {\n    const response = await fetch(FORM_CONFIG.apiUrls.categorias);\n    if (response.ok) {\n      return await response.json();\n    } else {\n      console.warn(\"‚ö†Ô∏è Backend no disponible, usando datos mock\");\n      return obtenerCategoriasMock();\n    }\n  } catch (error) {\n    console.warn(\"‚ö†Ô∏è Error conectando con backend, usando datos mock\", error);\n    return obtenerCategoriasMock();\n  }\n}\n\n/**\n * Carga datos de subcategor√≠as desde el backend (o mock)\n * @returns {Promise} - Promise con los datos de subcategor√≠as\n */\nasync function cargarSubcategorias() {\n  try {\n    const response = await fetch(FORM_CONFIG.apiUrls.subcategorias);\n    if (response.ok) {\n      return await response.json();\n    } else {\n      console.warn(\"‚ö†Ô∏è Backend no disponible, usando datos mock\");\n      return obtenerSubcategoriasMock();\n    }\n  } catch (error) {\n    console.warn(\"‚ö†Ô∏è Error conectando con backend, usando datos mock\", error);\n    return obtenerSubcategoriasMock();\n  }\n}\n\n/**\n * Obtiene categor√≠as mock para desarrollo\n * @returns {Array} - Array de categor√≠as mock\n */\nfunction obtenerCategoriasMock() {\n  return [\n    { categoria_original: \"L√°cteos\", categoria_normalizada: \"lacteos\" },\n    { categoria_original: \"Bebidas\", categoria_normalizada: \"bebidas\" },\n    { categoria_original: \"Limpieza\", categoria_normalizada: \"limpieza\" },\n    { categoria_original: \"Carnes\", categoria_normalizada: \"carnes\" },\n    { categoria_original: \"Verduras\", categoria_normalizada: \"verduras\" }\n  ];\n}\n\n/**\n * Obtiene subcategor√≠as mock para desarrollo\n * @returns {Array} - Array de subcategor√≠as mock\n */\nfunction obtenerSubcategoriasMock() {\n  return [\n    {\n      categoria_normalizada: \"lacteos\",\n      subcategorias: [\"Leche\", \"Yogurt\", \"Queso\", \"Manteca\"]\n    },\n    {\n      categoria_normalizada: \"bebidas\",\n      subcategorias: [\"Agua\", \"Gaseosas\", \"Jugos\", \"Cervezas\"]\n    },\n    {\n      categoria_normalizada: \"limpieza\",\n      subcategorias: [\"Detergente\", \"Lavandina\", \"Jab√≥n\", \"Suavizante\"]\n    },\n    {\n      categoria_normalizada: \"carnes\",\n      subcategorias: [\"Pollo\", \"Carne vacuna\", \"Cerdo\", \"Pescado\"]\n    },\n    {\n      categoria_normalizada: \"verduras\",\n      subcategorias: [\"Tomate\", \"Lechuga\", \"Cebolla\", \"Papa\"]\n    }\n  ];\n}\n\n/**\n * Carga supermercados din√°micamente\n * @returns {Promise} - Promise con los datos de supermercados\n */\nasync function cargarSupermercados() {\n  try {\n    const response = await fetch(FORM_CONFIG.apiUrls.supermercados);\n    if (response.ok) {\n      return await response.json();\n    } else {\n      console.warn(\"‚ö†Ô∏è Backend no disponible, usando configuraci√≥n local\");\n      return FORM_CONFIG.supermercados;\n    }\n  } catch (error) {\n    console.warn(\"‚ö†Ô∏è Error conectando con backend, usando configuraci√≥n local\", error);\n    return FORM_CONFIG.supermercados;\n  }\n}\n\n/**\n * Actualiza la configuraci√≥n desde el backend\n * Esta funci√≥n permitir√° actualizar la configuraci√≥n sin recargar la p√°gina\n */\nasync function actualizarConfiguracion() {\n  console.log(\"üîÑ Actualizando configuraci√≥n desde backend...\");\n  \n  try {\n    // Aqu√≠ se pueden cargar configuraciones din√°micas del backend\n    // Por ejemplo: tipos de producto activos, supermercados disponibles, etc.\n    console.log(\"‚úÖ Configuraci√≥n actualizada\");\n  } catch (error) {\n    console.warn(\"‚ö†Ô∏è Error actualizando configuraci√≥n\", error);\n  }\n}\n\n// ===============================================\n// API P√öBLICA DEL M√ìDULO\n// ===============================================\n\n// Exponer funciones p√∫blicas en el objeto window\nwindow.FormManager = {\n  inicializar: inicializarFormularios,\n  cargarTiposProducto: cargarTiposProducto,\n  mostrarFiltros: mostrarFiltrosAdicionales,\n  ocultarFiltros: ocultarFiltrosAdicionales,\n  poblarFiltro: poblarFiltroDinamico,\n  cargarCategorias: cargarCategorias,\n  cargarSubcategorias: cargarSubcategorias,\n  cargarSupermercados: cargarSupermercados,\n  actualizarConfiguracion: actualizarConfiguracion,\n  \n  // Getter para acceder a la configuraci√≥n\n  get config() {\n    return FORM_CONFIG;\n  }\n};\n\nconsole.log(\"üì¶ M√≥dulo FormManager cargado\");\n