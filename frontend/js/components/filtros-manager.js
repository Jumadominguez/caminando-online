// ===============================================
// FILTROS MANAGER - SISTEMA UNIFICADO DE FILTROS
// ===============================================

/**
 * M√≥dulo que maneja TODOS los filtros de la aplicaci√≥n de forma centralizada
 * Incluye: Categor√≠as, Tipo de Producto, Marca, Contenido, Variedad
 * Usa datos mock que simulan las respuestas del backend
 */

// ===============================================
// DATOS MOCK - CATEGOR√çAS Y SUBCATEGOR√çAS
// ===============================================

/**
 * Mock data para categor√≠as principales y sus subcategor√≠as
 * Simula la estructura que vendr√° de /api/categorias y /api/subcategorias
 */
const CATEGORIAS_SUBCATEGORIAS_MOCK = [
  {
    id: "alimentos",
    categoria_original: "üçé Alimentos",
    categoria_normalizada: "alimentos",
    subcategorias: [
      "Leche", "Yogurt", "Queso", "Manteca", "Crema", "Dulce de leche",
      "Agua", "Gaseosas", "Jugos", "Cervezas", "Vinos", "Energizantes",
      "Pollo", "Carne vacuna", "Cerdo", "Pescado", "Embutidos", "Milanesas",
      "Pan", "Facturas", "Galletitas", "Tostadas", "Bizcochos", "Tortas",
      "Tomate", "Lechuga", "Cebolla", "Papa", "Manzana", "Banana",
      "Hamburguesas", "Pizza", "Helados", "Vegetales", "Papas fritas", "Empanadas",
      "Arroz", "Fideos", "Harina", "Aceite", "Az√∫car", "Sal"
    ]
  },
  {
    id: "limpieza",
    categoria_original: "üßΩ Limpieza y Hogar", 
    categoria_normalizada: "limpieza hogar",
    subcategorias: [
      "Detergente", "Lavandina", "Jab√≥n", "Suavizante", "Desinfectante", "Limpiadores",
      "Papel higi√©nico", "Servilletas", "Pa√±uelos", "Rollos de cocina",
      "Vasos", "Platos", "Cubiertos", "Sartenes", "Decoraci√≥n", "Organizadores"
    ]
  },
  {
    id: "cuidado_personal",
    categoria_original: "üß¥ Cuidado Personal",
    categoria_normalizada: "cuidado personal",
    subcategorias: [
      "Shampoo", "Jab√≥n", "Pasta dental", "Desodorante", "Papel higi√©nico", "Pa√±ales",
      "Crema", "Protector solar", "Maquillaje", "Perfumes", "Afeitadoras"
    ]
  },
  {
    id: "mascotas",
    categoria_original: "üêï Mascotas",
    categoria_normalizada: "mascotas",
    subcategorias: [
      "Alimento perros", "Alimento gatos", "Arena", "Juguetes", "Correas", "Medicamentos",
      "Snacks", "Camas", "Transportadoras", "Comederos"
    ]
  },
  {
    id: "bebes",
    categoria_original: "üë∂ Beb√©s y Ni√±os",
    categoria_normalizada: "bebes ninos",
    subcategorias: [
      "Pa√±ales", "Toallitas", "Leche en polvo", "Papillas", "Chupetes", "Biberones",
      "Juguetes", "Ropa", "Cremas", "Medicamentos"
    ]
  },
  {
    id: "electrodomesticos",
    categoria_original: "‚ö° Electr√≥nicos",
    categoria_normalizada: "electronicos",
    subcategorias: [
      "Televisores", "Celulares", "Aud√≠fonos", "Cargadores", "Cables", "Parlantes",
      "Licuadoras", "Microondas", "Ventiladores", "Planchas"
    ]
  }
];

/**
 * Datos mock definidos localmente para evitar problemas de importaci√≥n
 * En el futuro estos vendr√°n del backend
 */

// Tipos de producto
const TIPOS_PRODUCTO_MOCK = [
  { id: "lacteos", nombre: "L√°cteos", categoria: "Alimentos", activo: true, orden: 1 },
  { id: "bebidas", nombre: "Bebidas", categoria: "Alimentos", activo: true, orden: 2 },
  { id: "limpieza", nombre: "Limpieza", categoria: "Hogar", activo: true, orden: 3 },
  { id: "carnes", nombre: "Carnes", categoria: "Alimentos", activo: true, orden: 4 },
  { id: "panaderia", nombre: "Panader√≠a", categoria: "Alimentos", activo: true, orden: 5 },
  { id: "verduras", nombre: "Verduras y Frutas", categoria: "Alimentos", activo: true, orden: 6 },
  { id: "higiene", nombre: "Higiene Personal", categoria: "Cuidado Personal", activo: true, orden: 7 },
  { id: "congelados", nombre: "Congelados", categoria: "Alimentos", activo: true, orden: 8 },
  { id: "mascotas", nombre: "Mascotas", categoria: "Otros", activo: true, orden: 9 },
  { id: "bazar", nombre: "Bazar y Hogar", categoria: "Hogar", activo: true, orden: 10 }
];

// Marcas por tipo
const MARCAS_MOCK = {
  lacteos: ["La Seren√≠sima", "Ilolay", "Sancor", "Milkaut", "Tregar", "Manfrey"],
  bebidas: ["Coca-Cola", "Pepsi", "Sprite", "Fanta", "Quilmes", "Stella Artois"],
  limpieza: ["Ala", "Skip", "Magistral", "Ayud√≠n", "Mr. M√∫sculo", "Cif"],
  carnes: ["Swift", "Quickfood", "Frigor√≠fico", "Paty", "Granja del Sol", "Campo Austral"],
  panaderia: ["Bimbo", "Lactal", "Fargo", "Don Satur", "Bagley", "Terrabusi"],
  verduras: ["Sin marca", "Org√°nico", "Campo Fresco", "Natural", "Estaci√≥n Saludable"],
  higiene: ["Head & Shoulders", "Pantene", "Sedal", "Rexona", "Dove", "Colgate"],
  congelados: ["McCain", "Granja del Sol", "La Paulina", "Bonduelle", "Findus"],
  mascotas: ["Pedigree", "Whiskas", "Pro Plan", "Royal Canin", "Excellent", "Dog Chow"],
  bazar: ["Tramontina", "Tefal", "Pyrex", "Tupperware", "Luminarc", "Vasconia"]
};

// Contenidos por tipo
const CONTENIDOS_MOCK = {
  lacteos: ["1L", "500ml", "200ml", "1kg", "500g", "200g"],
  bebidas: ["500ml", "1L", "1.5L", "2L", "2.5L", "355ml", "473ml"],
  limpieza: ["500ml", "750ml", "1L", "2L", "500g", "1kg", "3kg"],
  carnes: ["1kg", "500g", "250g", "2kg", "1.5kg", "300g"],
  panaderia: ["500g", "750g", "1kg", "400g", "300g", "200g"],
  verduras: ["1kg", "500g", "2kg", "1u", "3u", "6u"],
  higiene: ["400ml", "750ml", "1L", "200ml", "100g", "150g"],
  congelados: ["500g", "1kg", "300g", "400g", "1.5kg", "2kg"],
  mascotas: ["1kg", "3kg", "7.5kg", "15kg", "21kg", "500g"],
  bazar: ["1u", "2u", "4u", "6u", "Set x3", "Set x6"]
};

// Variedades por tipo
const VARIEDADES_MOCK = {
  lacteos: ["Entera", "Descremada", "Semidescremada", "Sin lactosa", "Org√°nica", "Cl√°sica"],
  bebidas: ["Original", "Zero", "Light", "Sin az√∫car", "Sabor lima", "Sabor naranja"],
  limpieza: ["Cl√°sico", "Concentrado", "Arom√°tico", "Antibacterial", "Para ropa blanca", "Para ropa de color"],
  carnes: ["Fresco", "Congelado", "Marinado", "Sin sal", "Org√°nico", "Premium"],
  panaderia: ["Integral", "Blanco", "Salvado", "Sin sal", "Artesanal", "Light"],
  verduras: ["Fresco", "Org√°nico", "Hidrop√≥nico", "Primera calidad", "Premium"],
  higiene: ["Normal", "Graso", "Seco", "Mixto", "Anticaspa", "Nutritivo"],
  congelados: ["Cl√°sico", "Premium", "Familiar", "Individual", "Light", "Org√°nico"],
  mascotas: ["Adulto", "Cachorro", "Senior", "Light", "Premium", "Natural"],
  bazar: ["Acero inoxidable", "Antiadherente", "Vidrio", "Pl√°stico", "Cer√°mica", "Aluminio"]
};

// ===============================================
// VARIABLES DEL M√ìDULO
// ===============================================

// Configuraci√≥n de textos para la interfaz
const TEXTOS_FILTROS = {
  tipo_producto: "Eleg√≠ una opci√≥n...",
  marca: "Eleg√≠ la marca",
  contenido: "Eleg√≠ el contenido",
  variedad: "Eleg√≠ la variedad",
  categoria_placeholder: "Escribe un producto"
};

// Configuraci√≥n de APIs (preparado para el futuro)
const API_CONFIG = {
  base_url: 'http://localhost:3000', // En producci√≥n ser√° 'https://api.caminando.online'
  endpoints: {
    tipos_producto: '/api/tipos-producto',
    categorias: '/api/categorias',
    marcas: '/api/marcas',
    contenidos: '/api/contenidos', 
    variedades: '/api/variedades',
    supermercados: '/api/supermercados',
    productos: '/api/productos',
    precios: '/api/precios'
  },
  timeout: 10000,
  retry_attempts: 3
};

// Referencias a elementos del DOM
let productoInput, categoryMenu, tipoProductoSelect;
let marcaSelect, contenidoSelect, variedadSelect;
let marcaWrapper, contenidoWrapper, variedadWrapper;

// Estado del m√≥dulo
let filtroActual = {
  categoria: null,
  subcategoria: null,
  tipoProducto: null,
  marca: null,
  contenido: null,
  variedad: null
};

// Configuraci√≥n
const CONFIG_FILTROS = {
  animacion_duracion: 300,
  delay_busqueda: 300,
  debug_mode: true
};

// ===============================================
// INICIALIZACI√ìN DEL M√ìDULO
// ===============================================

/**
 * Inicializa todo el sistema de filtros
 */
function inicializarFiltros() {
  console.log("üéØ Iniciando Filtros Manager Unificado...");
  
  // Obtener referencias DOM
  obtenerElementosDOM();
  
  // Inicializar filtros individuales
  inicializarFiltroCategorias();
  inicializarFiltroTipoProducto();
  inicializarFiltrosSecundarios();
  
  // Configurar event listeners
  configurarEventListeners();
  
  // Estado inicial
  establecerEstadoInicial();
  
  console.log("‚úÖ Filtros Manager inicializado completamente");
}

/**
 * Obtiene todas las referencias a elementos del DOM
 */
function obtenerElementosDOM() {
  productoInput = document.getElementById("producto");
  categoryMenu = document.getElementById("categoryMenu");
  
  // Filtro tipo de producto
  tipoProductoSelect = document.getElementById("tipo-de-producto");
  
  // Filtros secundarios
  marcaSelect = document.getElementById("marca");
  contenidoSelect = document.getElementById("contenido");
  variedadSelect = document.getElementById("variedad");
  
  // Wrappers de filtros secundarios
  marcaWrapper = document.getElementById("marca-wrapper");
  contenidoWrapper = document.getElementById("contenido-wrapper");
  variedadWrapper = document.getElementById("variedad-wrapper");
  
  if (CONFIG_FILTROS.debug_mode) {
    console.log("üîç Elementos DOM obtenidos:", {
      productoInput: !!productoInput,
      categoryMenu: !!categoryMenu,
      tipoProductoSelect: !!tipoProductoSelect,
      filtrosSecundarios: !!(marcaSelect && contenidoSelect && variedadSelect)
    });
  }
}

// ===============================================
// FILTRO DE CATEGOR√çAS (Input + Men√∫ Desplegable)
// ===============================================

/**
 * Inicializa el sistema de categor√≠as de forma simple
 */
function inicializarFiltroCategorias() {
  // Obtener referencias frescas
  const inputElemento = document.getElementById("producto");
  const menuElemento = document.getElementById("categoryMenu");
  
  if (!inputElemento || !menuElemento) {
    console.warn("‚ö†Ô∏è Elementos de categor√≠as no encontrados");
    return;
  }
  
  // Actualizar variables globales
  productoInput = inputElemento;
  categoryMenu = menuElemento;
  
  console.log("üìã Inicializando filtro de categor√≠as...");
  
  // Event listeners simples
  productoInput.addEventListener("click", mostrarMenuCategorias);
  productoInput.addEventListener("input", filtrarMenuCategorias);
  
  // Click fuera para cerrar
  document.addEventListener("click", function(e) {
    if (!e.target.closest(".category-dropdown")) {
      ocultarMenuCategorias();
    }
  });
  
  console.log("‚úÖ Filtro de categor√≠as inicializado");
}

/**
 * Maneja clicks fuera del men√∫ (funci√≥n ya no necesaria)
 */
function manejarClickFuera(e) {
  // Esta funci√≥n se mantiene por compatibilidad pero ya no se usa
}

/**
 * Muestra el men√∫ de categor√≠as de forma simple
 */
async function mostrarMenuCategorias() {
  if (!categoryMenu || !productoInput) return;
  
  console.log("üîÑ Mostrando men√∫ de categor√≠as...");
  
  // Limpiar men√∫
  categoryMenu.innerHTML = "";
  
  // Generar contenido
  CATEGORIAS_SUBCATEGORIAS_MOCK.forEach(categoria => {
    const groupDiv = crearGrupoCategorias(categoria);
    categoryMenu.appendChild(groupDiv);
  });
  
  // Mostrar men√∫
  categoryMenu.style.display = "block";
  
  console.log("‚úÖ Men√∫ mostrado");
}

/**
 * Oculta el men√∫ de categor√≠as
 */
function ocultarMenuCategorias() {
  if (!categoryMenu) return;
  categoryMenu.style.display = "none";
}

/**
 * Crea un grupo de categor√≠as con sus subcategor√≠as
 */
function crearGrupoCategorias(categoria) {
  const groupDiv = document.createElement("div");
  groupDiv.classList.add("category-group");
  groupDiv.setAttribute("data-categoria-id", categoria.id);
  
  // T√≠tulo de la categor√≠a
  const title = document.createElement("strong");
  title.textContent = categoria.categoria_original;
  title.classList.add("category-title");
  groupDiv.appendChild(title);
  
  // Lista de subcategor√≠as
  const subList = document.createElement("ul");
  subList.classList.add("subcategory-list");
  
  categoria.subcategorias.forEach(subcategoria => {
    const item = document.createElement("li");
    item.textContent = subcategoria;
    item.classList.add("subcategory-item");
    item.setAttribute("data-subcategoria", subcategoria);
    item.setAttribute("data-categoria-padre", categoria.id);
    
    // Event listener para selecci√≥n simple
    item.addEventListener("click", function() {
      seleccionarSubcategoria(subcategoria, categoria);
    });
    
    subList.appendChild(item);
  });
  
  groupDiv.appendChild(subList);
  return groupDiv;
}

/**
 * Selecciona una subcategor√≠a y actualiza el estado
 */
function seleccionarSubcategoria(subcategoria, categoria) {
  console.log(`üéØ Subcategor√≠a seleccionada: ${subcategoria} (${categoria.categoria_original})`);
  
  // Actualizar input
  if (productoInput) {
    productoInput.value = subcategoria;
  }
  
  // Ocultar men√∫
  ocultarMenuCategorias();
  
  // Actualizar estado interno
  filtroActual.categoria = categoria.id;
  filtroActual.subcategoria = subcategoria;
  
  // Disparar evento de cambio de filtro
  notificarCambioFiltro("categoria", { 
    categoria: categoria.id, 
    subcategoria: subcategoria 
  });
  
  // Mostrar filtros adicionales si est√°n ocultos
  mostrarFiltrosSecundarios();
}

/**
 * Filtra el men√∫ de categor√≠as basado en la entrada del usuario
 */
function filtrarMenuCategorias() {
  if (!productoInput || !categoryMenu) return;
  
  const input = normalizarTexto(productoInput.value);
  
  if (input.length === 0) {
    // Si no hay texto, mostrar todas las categor√≠as
    mostrarMenuCategorias();
    return;
  }
  
  const groups = categoryMenu.querySelectorAll(".category-group");
  
  groups.forEach(group => {
    const categoryTitle = group.querySelector(".category-title")?.textContent || "";
    const normalizedCategory = normalizarTexto(categoryTitle);
    
    const subItems = group.querySelectorAll(".subcategory-item");
    let categoryMatch = normalizedCategory.includes(input);
    let hasVisibleSubs = false;
    
    subItems.forEach(item => {
      const normalizedText = normalizarTexto(item.textContent);
      const match = normalizedText.includes(input) || categoryMatch;
      
      item.style.display = match ? "" : "none";
      if (match) hasVisibleSubs = true;
    });
    
    // Mostrar grupo si tiene coincidencias
    group.style.display = (categoryMatch || hasVisibleSubs) ? "" : "none";
  });
  
  // Auto-mostrar men√∫ si est√° oculto y hay texto
  if (categoryMenu.style.display === "none") {
    categoryMenu.style.display = "block";
  }
}

/**
 * Selecciona una subcategor√≠a
 */
function seleccionarSubcategoria(subcategoria, categoria) {
  console.log(`üéØ Subcategor√≠a seleccionada: ${subcategoria}`);
  
  // Actualizar input
  if (productoInput) {
    productoInput.value = subcategoria;
  }
  
  // Ocultar men√∫
  ocultarMenuCategorias();
  
  // Actualizar estado
  filtroActual.categoria = categoria.id;
  filtroActual.subcategoria = subcategoria;
  
  // Notificar cambio
  notificarCambioFiltro("categoria", { 
    categoria: categoria.id, 
    subcategoria: subcategoria 
  });
  
  // Mostrar filtros adicionales
  mostrarFiltrosSecundarios();
}

// ===============================================
// FILTRO TIPO DE PRODUCTO
// ===============================================

/**
 * Inicializa el filtro de tipo de producto
 */
function inicializarFiltroTipoProducto() {
  // Obtener referencia fresca justo antes de usar
  const selectElemento = document.getElementById("tipo-de-producto");
  
  if (!selectElemento) {
    console.warn("‚ö†Ô∏è Select tipo-de-producto no encontrado");
    return;
  }
  
  // Actualizar la variable global
  tipoProductoSelect = selectElemento;
  
  console.log("üì¶ Inicializando filtro tipo de producto...");
  
  // Cargar opciones
  cargarTiposProducto();
  
  // Event listener
  tipoProductoSelect.addEventListener("change", manejarCambioTipoProducto);
  
  console.log("‚úÖ Filtro tipo de producto inicializado");
}

/**
 * Carga las opciones de tipos de producto
 */
function cargarTiposProducto() {
  if (!tipoProductoSelect) return;
  
  console.log("üì¶ Cargando tipos de producto desde mock data...");
  
  // Limpiar select completamente
  tipoProductoSelect.innerHTML = "";
  
  // Agregar opci√≥n por defecto
  const defaultOption = document.createElement('option');
  defaultOption.value = "";
  defaultOption.selected = true;
  defaultOption.disabled = true;
  defaultOption.textContent = TEXTOS_FILTROS.tipo_producto;
  tipoProductoSelect.appendChild(defaultOption);
  
  // Agregar opciones din√°micamente
  TIPOS_PRODUCTO_MOCK
    .filter(tipo => tipo.activo)
    .sort((a, b) => a.orden - b.orden)
    .forEach(tipo => {
      const option = document.createElement('option');
      option.value = tipo.id;
      option.setAttribute('data-id', tipo.id);
      option.setAttribute('data-categoria', tipo.categoria);
      option.textContent = tipo.nombre;
      tipoProductoSelect.appendChild(option);
    });
  
  console.log(`‚úÖ ${TIPOS_PRODUCTO_MOCK.length} tipos de producto cargados`);
}

/**
 * Maneja el cambio en el select de tipo de producto
 */
function manejarCambioTipoProducto(event) {
  const tipoSeleccionado = event.target.value;
  
  console.log(`üéØ Tipo de producto seleccionado: ${tipoSeleccionado}`);
  
  // Actualizar estado
  filtroActual.tipoProducto = tipoSeleccionado;
  
  if (!tipoSeleccionado) {
    ocultarFiltrosSecundarios();
    return;
  }
  
  // Mostrar filtros secundarios
  mostrarFiltrosSecundarios();
  
  // Cargar opciones espec√≠ficas para este tipo
  cargarOpcionesPorTipo(tipoSeleccionado);
  
  // Disparar evento de cambio
  notificarCambioFiltro("tipoProducto", tipoSeleccionado);
}

// ===============================================
// FILTROS SECUNDARIOS (Marca, Contenido, Variedad)
// ===============================================

/**
 * Inicializa los filtros secundarios
 */
function inicializarFiltrosSecundarios() {
  console.log("üîß Inicializando filtros secundarios...");
  
  // Obtener referencias frescas justo antes de usar
  marcaSelect = document.getElementById("marca");
  contenidoSelect = document.getElementById("contenido");
  variedadSelect = document.getElementById("variedad");
  marcaWrapper = document.getElementById("marca-wrapper");
  contenidoWrapper = document.getElementById("contenido-wrapper");
  variedadWrapper = document.getElementById("variedad-wrapper");
  
  // Event listeners
  if (marcaSelect) {
    marcaSelect.addEventListener("change", (e) => manejarCambioFiltroSecundario("marca", e.target.value));
  }
  
  if (contenidoSelect) {
    contenidoSelect.addEventListener("change", (e) => manejarCambioFiltroSecundario("contenido", e.target.value));
  }
  
  if (variedadSelect) {
    variedadSelect.addEventListener("change", (e) => manejarCambioFiltroSecundario("variedad", e.target.value));
  }
  
  // Estado inicial: ocultos
  ocultarFiltrosSecundarios();
  
  console.log("‚úÖ Filtros secundarios inicializados");
}

/**
 * Carga opciones espec√≠ficas para un tipo de producto
 */
function cargarOpcionesPorTipo(tipoProducto) {
  console.log(`üìã Cargando opciones para tipo: ${tipoProducto}`);
  
  // Cargar marcas
  cargarOpcionesFiltro(marcaSelect, MARCAS_MOCK[tipoProducto] || []);
  
  // Cargar contenidos
  cargarOpcionesFiltro(contenidoSelect, CONTENIDOS_MOCK[tipoProducto] || []);
  
  // Cargar variedades
  cargarOpcionesFiltro(variedadSelect, VARIEDADES_MOCK[tipoProducto] || []);
  
  console.log(`‚úÖ Opciones cargadas para ${tipoProducto}`);
}

/**
 * Carga opciones en un filtro espec√≠fico
 */
function cargarOpcionesFiltro(selectElement, opciones) {
  if (!selectElement) return;
  
  // Limpiar select completamente
  selectElement.innerHTML = "";
  
  // Agregar opci√≥n por defecto seg√∫n el tipo de filtro
  const defaultOption = document.createElement('option');
  defaultOption.value = "";
  defaultOption.selected = true;
  defaultOption.disabled = true;
  
  // Determinar texto por defecto seg√∫n el ID del select
  if (selectElement.id === 'marca') {
    defaultOption.textContent = TEXTOS_FILTROS.marca;
  } else if (selectElement.id === 'contenido') {
    defaultOption.textContent = TEXTOS_FILTROS.contenido;
  } else if (selectElement.id === 'variedad') {
    defaultOption.textContent = TEXTOS_FILTROS.variedad;
  }
  
  selectElement.appendChild(defaultOption);
  
  // Agregar nuevas opciones
  opciones.forEach(opcion => {
    const option = document.createElement('option');
    option.value = opcion;
    option.textContent = opcion;
    selectElement.appendChild(option);
  });
  
  console.log(`‚úÖ ${opciones.length} opciones cargadas en ${selectElement.id}`);
}

/**
 * Maneja cambios en filtros secundarios
 */
function manejarCambioFiltroSecundario(tipoFiltro, valor) {
  console.log(`üéØ Filtro ${tipoFiltro} cambiado a: ${valor}`);
  
  // Actualizar estado
  filtroActual[tipoFiltro] = valor;
  
  // Disparar evento de cambio
  notificarCambioFiltro(tipoFiltro, valor);
}

/**
 * Muestra los filtros secundarios con animaci√≥n
 */
function mostrarFiltrosSecundarios() {
  const wrappers = [marcaWrapper, contenidoWrapper, variedadWrapper];
  
  wrappers.forEach((wrapper, index) => {
    if (!wrapper) return;
    
    wrapper.classList.remove('d-none');
    
    // Animaci√≥n suave escalonada
    setTimeout(() => {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(-10px)';
      
      setTimeout(() => {
        wrapper.style.transition = 'all 0.3s ease';
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
      }, 50);
    }, index * 100);
  });
  
  console.log("‚úÖ Filtros secundarios mostrados");
}

/**
 * Oculta los filtros secundarios
 */
function ocultarFiltrosSecundarios() {
  const wrappers = [marcaWrapper, contenidoWrapper, variedadWrapper];
  const selects = [marcaSelect, contenidoSelect, variedadSelect];
  
  wrappers.forEach((wrapper, index) => {
    if (!wrapper) return;
    
    // Animaci√≥n de salida
    wrapper.style.transition = 'all 0.2s ease';
    wrapper.style.opacity = '0';
    wrapper.style.transform = 'translateY(-10px)';
    
    setTimeout(() => {
      wrapper.classList.add('d-none');
      
      // Limpiar select correspondiente
      const select = selects[index];
      if (select) {
        const opciones = select.querySelectorAll('option:not(:first-child)');
        opciones.forEach(opcion => opcion.remove());
        select.selectedIndex = 0;
      }
    }, 200);
  });
  
  // Resetear estado
  filtroActual.marca = null;
  filtroActual.contenido = null;
  filtroActual.variedad = null;
  
  console.log("‚úÖ Filtros secundarios ocultados");
}

// ===============================================
// CONFIGURACI√ìN DE EVENT LISTENERS
// ===============================================

/**
 * Configura todos los event listeners del m√≥dulo
 */
function configurarEventListeners() {
  console.log("üîó Configurando event listeners de filtros...");
  
  // Event listeners ya configurados en las funciones espec√≠ficas
  // Esta funci√≥n se mantiene para futuras expansiones
  
  console.log("‚úÖ Event listeners de filtros configurados");
}

// ===============================================
// GESTI√ìN DE ESTADO Y EVENTOS
// ===============================================

/**
 * Establece el estado inicial de todos los filtros
 */
function establecerEstadoInicial() {
  // Resetear estado interno
  filtroActual = {
    categoria: null,
    subcategoria: null,
    tipoProducto: null,
    marca: null,
    contenido: null,
    variedad: null
  };
  
  // Ocultar filtros secundarios
  ocultarFiltrosSecundarios();
  
  console.log("üîÑ Estado inicial establecido");
}

/**
 * Notifica cambios en filtros a otros m√≥dulos
 */
function notificarCambioFiltro(tipoFiltro, valor) {
  // Crear evento personalizado
  const evento = new CustomEvent('filtrosCambiados', {
    detail: {
      tipo: tipoFiltro,
      valor: valor,
      estadoCompleto: { ...filtroActual }
    }
  });
  
  // Disparar evento
  document.dispatchEvent(evento);
  
  if (CONFIG_FILTROS.debug_mode) {
    console.log("üì° Evento filtrosCambiados disparado:", {
      tipo: tipoFiltro,
      valor: valor,
      estadoCompleto: filtroActual
    });
  }
}

/**
 * Obtiene el estado actual de todos los filtros
 */
function obtenerEstadoFiltros() {
  return { ...filtroActual };
}

/**
 * Resetea todos los filtros
 */
function resetearTodosFiltros() {
  console.log("üîÑ Reseteando todos los filtros...");
  
  // Resetear input de categor√≠as
  if (productoInput) {
    productoInput.value = "";
  }
  
  // Ocultar men√∫ de categor√≠as
  ocultarMenuCategorias();
  
  // Resetear tipo de producto
  if (tipoProductoSelect) {
    tipoProductoSelect.selectedIndex = 0;
  }
  
  // Ocultar y resetear filtros secundarios
  ocultarFiltrosSecundarios();
  
  // Resetear estado interno
  establecerEstadoInicial();
  
  // Notificar reset
  notificarCambioFiltro("reset", null);
  
  console.log("‚úÖ Todos los filtros reseteados");
}

// ===============================================
// FUNCIONES UTILITARIAS
// ===============================================

/**
 * Normaliza texto para b√∫squedas (quita acentos y convierte a min√∫sculas)
 */
function normalizarTexto(texto) {
  return texto
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .toLowerCase()
    .trim();
}

/**
 * Simula llamada a API del backend (preparado para el futuro)
 */
async function simularLlamadaAPI(endpoint, params = {}) {
  console.log(`üåê [SIMULADO] Llamada a ${endpoint}`, params);
  
  // Simular delay de red
  await new Promise(resolve => setTimeout(resolve, 100));
  
  // En el futuro ser√°:
  // const response = await fetch(`${API_CONFIG.base_url}${endpoint}`, {
  //   method: 'GET',
  //   headers: { 'Content-Type': 'application/json' },
  //   ...params
  // });
  // return await response.json();
  
  // Por ahora devolver datos mock seg√∫n el endpoint
  switch(endpoint) {
    case '/api/categorias':
      return CATEGORIAS_SUBCATEGORIAS_MOCK;
    case '/api/tipos-producto':
      return TIPOS_PRODUCTO_MOCK;
    case '/api/marcas':
      return MARCAS_MOCK;
    case '/api/contenidos':
      return CONTENIDOS_MOCK;
    case '/api/variedades':
      return VARIEDADES_MOCK;
    default:
      return [];
  }
}

// ===============================================
// API P√öBLICA DEL M√ìDULO
// ===============================================

/**
 * API p√∫blica del m√≥dulo FiltrosManager
 */
window.FiltrosManager = {
  // Inicializaci√≥n
  inicializar: inicializarFiltros,
  
  // Gesti√≥n de categor√≠as
  mostrarCategorias: mostrarMenuCategorias,
  ocultarCategorias: ocultarMenuCategorias,
  filtrarCategorias: filtrarMenuCategorias,
  
  // Gesti√≥n de tipo de producto
  cargarTiposProducto: cargarTiposProducto,
  cargarOpcionesPorTipo: cargarOpcionesPorTipo,
  
  // Gesti√≥n de filtros secundarios
  mostrarFiltrosSecundarios: mostrarFiltrosSecundarios,
  ocultarFiltrosSecundarios: ocultarFiltrosSecundarios,
  
  // Estado y control
  obtenerEstado: obtenerEstadoFiltros,
  resetear: resetearTodosFiltros,
  
  // Utilidades
  simularAPI: simularLlamadaAPI,
  
  // Compatibilidad con versiones anteriores
  inicializarFormularios: inicializarFiltros,
  resetearFiltros: resetearTodosFiltros
};

// Compatibilidad con FormManagerDinamico existente
window.FormManagerDinamico = window.FiltrosManager;

console.log("üì¶ FiltrosManager cargado - Sistema unificado de filtros listo");
