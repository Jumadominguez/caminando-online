// ===============================================
// PAGOS E HISTORIAL MANAGER - pagos-historial.js
// ===============================================

/**
 * M√≥dulo para gestionar m√©todos de pago e historial de compras
 * Incluye funcionalidad para mostrar datos en formato horizontal
 */

// ===============================================
// DATOS DE EJEMPLO
// ===============================================

const PAYMENT_METHODS_EJEMPLO = [
  {
    id: 'pm_001',
    tipo: 'tarjeta',
    alias: 'Visa Personal',
    numero: '**** **** **** 1234',
    titular: 'Juan P√©rez',
    vencimiento: '12/27',
    banco: 'Santander',
    esPrincipal: true,
    activa: true
  },
  {
    id: 'pm_002',
    tipo: 'mercadopago',
    alias: 'MercadoPago Principal',
    email: 'juan@email.com',
    esPrincipal: false,
    activa: true
  },
  {
    id: 'pm_003',
    tipo: 'modo',
    alias: 'MODO Banco Naci√≥n',
    cbu: '****-****-**0001',
    esPrincipal: false,
    activa: true
  }
];

const PURCHASES_EJEMPLO = [
  {
    id: 'pur_001',
    fecha: '2025-08-15',
    supermercados: ['Carrefour', 'Disco'],
    productos: 15,
    total: 45250,
    ahorro: 8300,
    estado: 'entregado',
    metodo_pago: 'Visa Personal'
  },
  {
    id: 'pur_002',
    fecha: '2025-08-12',
    supermercados: ['Jumbo'],
    productos: 8,
    total: 22100,
    ahorro: 3400,
    estado: 'entregado',
    metodo_pago: 'MercadoPago Principal'
  },
  {
    id: 'pur_003',
    fecha: '2025-08-10',
    supermercados: ['Vea', 'D√≠a', 'Disco'],
    productos: 22,
    total: 67890,
    ahorro: 12560,
    estado: 'confirmado',
    metodo_pago: 'Visa Personal'
  },
  {
    id: 'pur_004',
    fecha: '2025-08-08',
    supermercados: ['Carrefour'],
    productos: 5,
    total: 18750,
    ahorro: 2100,
    estado: 'procesando',
    metodo_pago: 'MODO Banco Naci√≥n'
  },
  {
    id: 'pur_005',
    fecha: '2025-08-05',
    supermercados: ['Disco', 'Vea'],
    productos: 12,
    total: 35480,
    ahorro: 6200,
    estado: 'entregado',
    metodo_pago: 'MercadoPago Principal'
  }
];

const ESTADISTICAS_EJEMPLO = {
  totalGastado: 189470,
  totalAhorrado: 32560,
  comprasMes: 5,
  promedioAhorro: 17.2
};

// ===============================================
// INICIALIZACI√ìN
// ===============================================

/**
 * Inicializa el m√≥dulo de pagos e historial
 */
function inicializarPagosHistorial() {
  console.log("üí≥ Inicializando m√≥dulo de pagos e historial...");
  
  // Cargar estad√≠sticas
  cargarEstadisticas();
  
  // Cargar m√©todos de pago
  cargarMetodosPago();
  
  // Cargar historial de compras
  cargarHistorialCompras();
  
  // Configurar event listeners
  configurarEventListeners();
  
  console.log("‚úÖ M√≥dulo de pagos e historial inicializado");
}

// ===============================================
// ESTAD√çSTICAS
// ===============================================

/**
 * Carga las estad√≠sticas de pagos
 */
function cargarEstadisticas() {
  console.log("üìä Cargando estad√≠sticas...");
  
  const stats = ESTADISTICAS_EJEMPLO;
  
  // Actualizar elementos
  actualizarElemento('total-gastado', formatearMoneda(stats.totalGastado));
  actualizarElemento('total-ahorrado', formatearMoneda(stats.totalAhorrado));
  actualizarElemento('compras-mes', stats.comprasMes);
  actualizarElemento('promedio-ahorro', `${stats.promedioAhorro}%`);
  
  console.log("‚úÖ Estad√≠sticas cargadas");
}

// ===============================================
// M√âTODOS DE PAGO
// ===============================================

/**
 * Carga los m√©todos de pago en formato horizontal
 */
function cargarMetodosPago() {
  console.log("üí≥ Cargando m√©todos de pago...");
  
  const container = document.getElementById('payment-methods-list');
  
  if (!container) {
    console.warn("‚ö†Ô∏è Contenedor de m√©todos de pago no encontrado");
    return;
  }
  
  if (PAYMENT_METHODS_EJEMPLO.length === 0) {
    mostrarEstadoVacio(container, 'metodos-pago');
    return;
  }
  
  // Generar HTML de m√©todos de pago
  const metodosHTML = PAYMENT_METHODS_EJEMPLO.map(metodo => generarHTMLMetodoPago(metodo)).join('');
  
  container.innerHTML = metodosHTML;
  
  console.log("‚úÖ M√©todos de pago cargados");
}

/**
 * Genera HTML para un m√©todo de pago
 */
function generarHTMLMetodoPago(metodo) {
  const icono = obtenerIconoMetodoPago(metodo.tipo);
  const descripcion = obtenerDescripcionMetodoPago(metodo);
  const esPrincipalBadge = metodo.esPrincipal ? '<span class="badge bg-primary ms-2">Principal</span>' : '';
  
  return `
    <div class="payment-method-item ${metodo.esPrincipal ? 'is-default' : ''}" data-payment-id="${metodo.id}">
      <div class="payment-method-info">
        <div class="payment-method-icon">
          ${icono}
        </div>
        <div class="payment-method-details">
          <div class="payment-method-name">
            ${metodo.alias}
            ${esPrincipalBadge}
          </div>
          <div class="payment-method-desc">
            ${descripcion}
          </div>
        </div>
      </div>
      <div class="payment-method-actions">
        <button class="btn btn-sm btn-outline-primary" onclick="editarMetodoPago('${metodo.id}')">
          ‚úèÔ∏è
        </button>
        <button class="btn btn-sm btn-outline-danger" onclick="eliminarMetodoPago('${metodo.id}')">
          üóëÔ∏è
        </button>
      </div>
    </div>
  `;
}

/**
 * Obtiene el icono apropiado para el tipo de m√©todo de pago
 */
function obtenerIconoMetodoPago(tipo) {
  switch (tipo) {
    case 'tarjeta':
      return 'üí≥';
    case 'mercadopago':
      return 'üîµ';
    case 'modo':
      return 'üü£';
    default:
      return 'üí∞';
  }
}

/**
 * Obtiene la descripci√≥n del m√©todo de pago
 */
function obtenerDescripcionMetodoPago(metodo) {
  switch (metodo.tipo) {
    case 'tarjeta':
      return `${metodo.numero} ‚Ä¢ ${metodo.banco} ‚Ä¢ Vence ${metodo.vencimiento}`;
    case 'mercadopago':
      return `${metodo.email}`;
    case 'modo':
      return `CBU ${metodo.cbu}`;
    default:
      return 'M√©todo de pago';
  }
}

// ===============================================
// HISTORIAL DE COMPRAS
// ===============================================

/**
 * Carga el historial de compras en formato horizontal
 */
function cargarHistorialCompras() {
  console.log("üõçÔ∏è Cargando historial de compras...");
  
  const container = document.getElementById('purchases-list');
  
  if (!container) {
    console.warn("‚ö†Ô∏è Contenedor de historial no encontrado");
    return;
  }
  
  if (PURCHASES_EJEMPLO.length === 0) {
    mostrarEstadoVacio(container, 'historial');
    return;
  }
  
  // Generar HTML del historial
  const historialHTML = PURCHASES_EJEMPLO.map(compra => generarHTMLCompra(compra)).join('');
  
  container.innerHTML = historialHTML;
  
  console.log("‚úÖ Historial de compras cargado");
}

/**
 * Genera HTML para una compra
 */
function generarHTMLCompra(compra) {
  const fechaFormateada = formatearFecha(compra.fecha);
  const supermercadosTexto = compra.supermercados.join(', ');
  const estadoClase = `status-${compra.estado}`;
  const estadoTexto = formatearEstado(compra.estado);
  
  return `
    <div class="purchase-item" data-purchase-id="${compra.id}" onclick="verDetallesCompra('${compra.id}')">
      <div class="purchase-icon">
        üõí
      </div>
      <div class="purchase-info">
        <div class="purchase-title">
          ${compra.productos} productos ‚Ä¢ ${supermercadosTexto}
        </div>
        <div class="purchase-subtitle">
          ${compra.metodo_pago} ‚Ä¢ Ahorro: ${formatearMoneda(compra.ahorro)}
        </div>
      </div>
      <div class="purchase-date">
        ${fechaFormateada}
      </div>
      <div class="purchase-amount">
        ${formatearMoneda(compra.total)}
      </div>
      <div class="purchase-status ${estadoClase}">
        ${estadoTexto}
      </div>
    </div>
  `;
}

// ===============================================
// UTILIDADES
// ===============================================

/**
 * Actualiza el contenido de un elemento
 */
function actualizarElemento(id, contenido) {
  const elemento = document.getElementById(id);
  if (elemento) {
    elemento.textContent = contenido;
  }
}

/**
 * Formatea una cantidad como moneda argentina
 */
function formatearMoneda(cantidad) {
  return new Intl.NumberFormat('es-AR', {
    style: 'currency',
    currency: 'ARS',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(cantidad);
}

/**
 * Formatea una fecha
 */
function formatearFecha(fecha) {
  const date = new Date(fecha);
  return new Intl.DateTimeFormat('es-AR', {
    day: '2-digit',
    month: '2-digit',
    year: '2-digit'
  }).format(date);
}

/**
 * Formatea el estado de una compra
 */
function formatearEstado(estado) {
  const estados = {
    'pendiente': 'Pendiente',
    'procesando': 'Procesando',
    'confirmado': 'Confirmado',
    'entregado': 'Entregado',
    'cancelado': 'Cancelado'
  };
  
  return estados[estado] || estado;
}

/**
 * Muestra el estado vac√≠o apropiado
 */
function mostrarEstadoVacio(container, tipo) {
  const estados = {
    'metodos-pago': {
      icono: 'üí≥',
      titulo: 'No hay m√©todos de pago guardados',
      subtitulo: 'Agreg√° una tarjeta o cuenta para realizar compras',
      boton: 'Agregar m√©todo de pago'
    },
    'historial': {
      icono: 'üõçÔ∏è',
      titulo: 'No hay compras registradas',
      subtitulo: '¬°Realiz√° tu primera compra para ver el historial aqu√≠!',
      boton: 'Comparar productos'
    }
  };
  
  const config = estados[tipo];
  
  container.innerHTML = `
    <div class="empty-state">
      <div class="empty-icon">${config.icono}</div>
      <div class="empty-text">
        <div class="empty-title">${config.titulo}</div>
        <div class="empty-subtitle">${config.subtitulo}</div>
      </div>
      <button class="btn btn-outline-primary btn-sm" onclick="${tipo === 'metodos-pago' ? 'abrirModalPago()' : 'irAComparar()'}">
        ${config.boton}
      </button>
    </div>
  `;
}

// ===============================================
// ACCIONES
// ===============================================

/**
 * Edita un m√©todo de pago
 */
function editarMetodoPago(id) {
  console.log("‚úèÔ∏è Editando m√©todo de pago:", id);
  alert('Funci√≥n en desarrollo: Editar m√©todo de pago');
}

/**
 * Elimina un m√©todo de pago
 */
function eliminarMetodoPago(id) {
  console.log("üóëÔ∏è Eliminando m√©todo de pago:", id);
  if (confirm('¬øEst√°s seguro de que quer√©s eliminar este m√©todo de pago?')) {
    alert('Funci√≥n en desarrollo: Eliminar m√©todo de pago');
  }
}

/**
 * Ve los detalles de una compra
 */
function verDetallesCompra(id) {
  console.log("üëÅÔ∏è Viendo detalles de compra:", id);
  alert('Funci√≥n en desarrollo: Ver detalles de compra');
}

/**
 * Abre el modal de agregar m√©todo de pago
 */
function abrirModalPago() {
  const modal = document.getElementById('paymentMethodModal');
  if (modal) {
    const bsModal = new bootstrap.Modal(modal);
    bsModal.show();
  }
}

/**
 * Va a la p√°gina de comparar productos
 */
function irAComparar() {
  window.location.href = '/index.html';
}

// ===============================================
// EVENT LISTENERS
// ===============================================

/**
 * Configura los event listeners
 */
function configurarEventListeners() {
  console.log("üîó Configurando event listeners de pagos...");
  
  // Bot√≥n de agregar m√©todo de pago
  const addPaymentBtns = document.querySelectorAll('#add-payment-method-btn, #add-first-payment-btn');
  addPaymentBtns.forEach(btn => {
    btn.addEventListener('click', abrirModalPago);
  });
  
  // Formulario de filtros
  const filtersForm = document.getElementById('filters-form');
  if (filtersForm) {
    filtersForm.addEventListener('submit', function(e) {
      e.preventDefault();
      aplicarFiltros();
    });
  }
  
  // Bot√≥n de limpiar filtros
  const clearFiltersBtn = document.getElementById('clear-filters-btn');
  if (clearFiltersBtn) {
    clearFiltersBtn.addEventListener('click', limpiarFiltros);
  }
  
  console.log("‚úÖ Event listeners de pagos configurados");
}

/**
 * Aplica filtros al historial
 */
function aplicarFiltros() {
  console.log("üîç Aplicando filtros...");
  alert('Funci√≥n en desarrollo: Aplicar filtros');
}

/**
 * Limpia los filtros
 */
function limpiarFiltros() {
  console.log("üßπ Limpiando filtros...");
  const form = document.getElementById('filters-form');
  if (form) {
    form.reset();
  }
}

// ===============================================
// INICIALIZACI√ìN AUTOM√ÅTICA
// ===============================================

// Inicializar cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', function() {
  console.log('üí≥ DEBUG: Verificando si se debe inicializar pagos-historial...');
  
  // FORZAR INICIALIZACI√ìN EN LA P√ÅGINA DE PAGOS
  if (window.location.pathname.includes('/pagos.html')) {
    console.log('üí≥ P√°gina de pagos detectada, inicializando mockups...');
    inicializarPagosHistorial();
  } else if (document.getElementById('payment-methods-list') || document.getElementById('purchases-list')) {
    console.log('üí≥ Elementos encontrados, inicializando...');
    inicializarPagosHistorial();
  } else {
    console.log('‚ö†Ô∏è Elementos no encontrados, no se inicializa pagos-historial');
  }
});

console.log("üì¶ PagosHistorialManager cargado");
